apply plugin: 'maven'
apply plugin: 'java'
sourceCompatibility = 10
description = ''

group = 'no.dependent'
version = '2.0'

repositories {
	    maven { url rootProject.getRootDir().toURL().toString()+"build/artifacts/" };
	    maven { url "http://kamino.local.dbwatch.com:8081/nexus/content/groups/public/" }
	}


buildscript {
    repositories {
        maven { url rootProject.getRootDir().toURL().toString()+"build/artifacts/" };
        maven { url "http://kamino.local.dbwatch.com:8081/nexus/content/groups/public/" }
    }

    dependencies {
//        classpath 'genjar:genjar:1.0.2'
    }

}

task packageTests(type: Jar) {
  from sourceSets.test.output
  classifier = 'tests'
}

artifacts.archives packageTests


ant.project.getBuildListeners().firstElement().setMessageOutputLevel(3)

task copyImplementationClasses(type: Copy) {
    dependsOn compileJava
    outputs.upToDateWhen {false}

    from 'build/classes/main/no/dependent_implementation'
    into 'build/classes/main/private/no/dependent_implementation'
}

task cleanImplementationClasses(type: Delete){
    dependsOn copyImplementationClasses
    outputs.upToDateWhen {false}
    delete 'build/classes/main/no/dependent_implementation'
}

task packageImplementation {
    dependsOn cleanImplementationClasses

    doLast {
        def paths = project.configurations.runtime.asPath
        paths.split(':').each { dependencyJar ->
            println "unpacking" + dependencyJar

            ant.unzip(src: dependencyJar,
                    dest: "build/classes/main/private/",
                    overwrite: "true")
        }

    }
}

task makeImplementationJar(type:Jar){
    dependsOn packageImplementation
    classifier = 'implementation'
    from 'build/package_implementation/'
}

jar.dependsOn makeImplementationJar


jar {
    manifest {
        attributes("Main-Class": "no.dependent.DependentMain")
    }
}
artifacts {
    archives makeImplementationJar
}


install.repositories.mavenInstaller.pom.dependencies.removeAll { true }

def pomFileLocation="dependent/build/poms/pom-default.xml"

/**
 * Creates pom with dependencies
 */
task writeNewPom << {
    pom {}.writeTo(pomFileLocation)
}

/**
 * Reads and Overwrites POM file removing dependencies
 */
task cleanPom(dependsOn: writeNewPom) << {
    def xml = new XmlParser().parse(pomFileLocation)
    def nodes = []
    xml.dependencies[0].each {
        nodes.add(it)
    }
    def parrent = nodes.first().parent()
    nodes.each {
        parrent.remove(it)
    }
    new XmlNodePrinter(new PrintWriter(new FileWriter(pomFileLocation))).print(xml)
}

install {
    repositories {
        mavenDeployer {
	    repository(url: rootProject.getRootDir().toURL().toString()+"build/artifacts/");
            pom.whenConfigured {pom ->
                pom.dependencies.clear()
            }
        }
    }
}

install.dependsOn cleanPom


tasks.withType(JavaCompile){
    options.warnings = false
}


task sourcesJar(type: Jar, dependsOn: classes) {
	classifier 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives sourcesJar
}

